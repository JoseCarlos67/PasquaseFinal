
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jun 15 20:11:42 BRT 2023
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jun 15 20:11:42 BRT 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\004\000\002\002\010\000\002\002" +
    "\003\000\002\003\014\000\002\005\007\000\002\005\002" +
    "\000\002\006\004\000\002\006\004\000\002\006\002\000" +
    "\002\007\017\000\002\011\003\000\002\011\005\000\002" +
    "\011\002\000\002\010\007\000\002\012\005\000\002\012" +
    "\007\000\002\012\002\000\002\013\004\000\002\013\002" +
    "\000\002\014\006\000\002\014\007\000\002\015\003\000" +
    "\002\015\005\000\002\015\005\000\002\015\007\000\002" +
    "\017\003\000\002\017\005\000\002\017\003\000\002\016" +
    "\003\000\002\016\005\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\004\003\000\002\004\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\021\015\000\002\033\007\000\002\034\007" +
    "\000\002\035\007\000\002\036\007\000\002\022\003\000" +
    "\002\022\004\000\002\022\003\000\002\022\004\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\040\006\000\002\040\005\000\002\040\006\000" +
    "\002\041\005\000\002\026\006\000\002\027\007\000\002" +
    "\027\002\000\002\030\007\000\002\037\003\000\002\037" +
    "\003\000\002\024\015\000\002\025\013\000\002\042\006" +
    "\000\002\043\005\000\002\043\002\000\002\046\003\000" +
    "\002\046\003\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\047\003\000\002\047" +
    "\003\000\002\044\005\000\002\044\007\000\002\044\007" +
    "\000\002\045\003\000\002\045\005\000\002\045\004\000" +
    "\002\045\006\000\002\050\003\000\002\050\002\000\002" +
    "\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\322\000\010\002\uffa8\012\uffa8\043\004\001\002\000" +
    "\010\002\uffa9\006\uffa9\012\uffa9\001\002\000\006\002\uffa7" +
    "\012\011\001\002\000\004\002\uffff\001\002\000\004\002" +
    "\010\001\002\000\004\002\001\001\002\000\004\064\012" +
    "\001\002\000\004\005\013\001\002\000\006\006\uffa8\043" +
    "\004\001\002\000\004\006\015\001\002\000\004\004\017" +
    "\001\002\000\004\002\000\001\002\000\004\005\020\001" +
    "\002\000\014\007\ufffc\015\022\016\ufffc\021\ufffc\022\ufffc" +
    "\001\002\000\012\007\ufff9\016\ufff9\021\033\022\032\001" +
    "\002\000\004\064\023\001\002\000\006\013\025\014\026" +
    "\001\002\000\004\005\027\001\002\000\026\005\uffde\045" +
    "\uffde\046\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde" +
    "\054\uffde\063\uffde\001\002\000\026\005\uffdd\045\uffdd\046" +
    "\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd" +
    "\063\uffdd\001\002\000\014\007\ufffc\015\022\016\ufffc\021" +
    "\ufffc\022\ufffc\001\002\000\012\007\ufffd\016\ufffd\021\ufffd" +
    "\022\ufffd\001\002\000\012\007\ufff9\016\ufff9\021\033\022" +
    "\032\001\002\000\004\064\312\001\002\000\004\064\271" +
    "\001\002\000\006\007\uffef\016\037\001\002\000\012\007" +
    "\ufff9\016\ufff9\021\033\022\032\001\002\000\006\007\ufffb" +
    "\016\ufffb\001\002\000\004\064\246\001\002\000\004\007" +
    "\041\001\002\000\022\023\055\024\043\025\056\026\045" +
    "\027\042\035\063\036\066\064\054\001\002\000\004\064" +
    "\233\001\002\000\004\062\227\001\002\000\024\010\uffce" +
    "\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\035\uffce\036" +
    "\uffce\064\uffce\001\002\000\004\062\223\001\002\000\024" +
    "\010\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\035" +
    "\uffcd\036\uffcd\064\uffcd\001\002\000\024\010\uffc8\023\uffc8" +
    "\024\uffc8\025\uffc8\026\uffc8\027\uffc8\035\uffc8\036\uffc8\064" +
    "\uffc8\001\002\000\024\010\uffbf\023\uffbf\024\uffbf\025\uffbf" +
    "\026\uffbf\027\uffbf\035\uffbf\036\uffbf\064\uffbf\001\002\000" +
    "\024\010\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9" +
    "\035\uffc9\036\uffc9\064\uffc9\001\002\000\024\010\uffca\023" +
    "\uffca\024\uffca\025\uffca\026\uffca\027\uffca\035\uffca\036\uffca" +
    "\064\uffca\001\002\000\004\010\221\001\002\000\006\033" +
    "\170\062\167\001\002\000\004\062\157\001\002\000\004" +
    "\062\150\001\002\000\024\010\uffd0\023\055\024\043\025" +
    "\056\026\045\027\042\035\063\036\066\064\054\001\002" +
    "\000\024\010\uffd2\023\055\024\043\025\056\026\045\027" +
    "\042\035\063\036\066\064\054\001\002\000\024\010\uffcb" +
    "\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\035\uffcb\036" +
    "\uffcb\064\uffcb\001\002\000\004\040\133\001\002\000\004" +
    "\062\122\001\002\000\024\010\uffbe\023\uffbe\024\uffbe\025" +
    "\uffbe\026\uffbe\027\uffbe\035\uffbe\036\uffbe\064\uffbe\001\002" +
    "\000\024\010\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027" +
    "\uffcc\035\uffcc\036\uffcc\064\uffcc\001\002\000\004\062\067" +
    "\001\002\000\012\013\025\014\026\044\072\064\075\001" +
    "\002\000\026\005\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2" +
    "\051\uffb2\052\uffb2\053\uffb2\054\uffb2\063\uffb2\001\002\000" +
    "\004\063\121\001\002\000\010\013\025\014\026\064\075" +
    "\001\002\000\020\045\100\046\107\047\104\050\105\051" +
    "\103\052\106\054\102\001\002\000\006\053\076\063\uffad" +
    "\001\002\000\026\005\uffb1\045\uffb1\046\uffb1\047\uffb1\050" +
    "\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\063\uffb1\001\002" +
    "\000\012\013\025\014\026\044\072\064\075\001\002\000" +
    "\004\063\uffac\001\002\000\010\013\uffb8\014\uffb8\064\uffb8" +
    "\001\002\000\010\013\025\014\026\064\075\001\002\000" +
    "\010\013\025\014\026\064\075\001\002\000\010\013\uffb6" +
    "\014\uffb6\064\uffb6\001\002\000\010\013\uffb3\014\uffb3\064" +
    "\uffb3\001\002\000\010\013\uffb5\014\uffb5\064\uffb5\001\002" +
    "\000\010\013\uffb4\014\uffb4\064\uffb4\001\002\000\010\013" +
    "\uffb7\014\uffb7\064\uffb7\001\002\000\022\045\100\046\107" +
    "\047\104\050\105\051\103\052\106\053\uffb0\063\uffb0\001" +
    "\002\000\010\013\025\014\026\064\075\001\002\000\006" +
    "\053\uffae\063\uffae\001\002\000\004\054\114\001\002\000" +
    "\010\013\025\014\026\064\075\001\002\000\006\053\uffaf" +
    "\063\uffaf\001\002\000\006\053\117\063\uffab\001\002\000" +
    "\012\013\025\014\026\044\072\064\075\001\002\000\004" +
    "\063\uffaa\001\002\000\004\040\uffc3\001\002\000\012\013" +
    "\025\014\026\044\072\064\075\001\002\000\004\063\124" +
    "\001\002\000\004\032\125\001\002\000\004\007\126\001" +
    "\002\000\022\023\055\024\043\025\056\026\045\027\042" +
    "\035\063\036\066\064\054\001\002\000\004\010\130\001" +
    "\002\000\004\005\131\001\002\000\024\010\uffbc\023\uffbc" +
    "\024\uffbc\025\uffbc\026\uffbc\027\uffbc\035\uffbc\036\uffbc\064" +
    "\uffbc\001\002\000\026\010\uffc1\023\uffc1\024\uffc1\025\uffc1" +
    "\026\uffc1\027\uffc1\035\uffc1\036\uffc1\037\141\064\uffc1\001" +
    "\002\000\004\007\134\001\002\000\022\023\055\024\043" +
    "\025\056\026\045\027\042\035\063\036\066\064\054\001" +
    "\002\000\004\010\136\001\002\000\004\005\137\001\002" +
    "\000\026\010\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027" +
    "\uffc0\035\uffc0\036\uffc0\037\uffc0\064\uffc0\001\002\000\024" +
    "\010\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\035" +
    "\uffc4\036\uffc4\064\uffc4\001\002\000\004\007\142\001\002" +
    "\000\022\023\055\024\043\025\056\026\045\027\042\035" +
    "\063\036\066\064\054\001\002\000\004\010\144\001\002" +
    "\000\004\005\145\001\002\000\024\010\uffc2\023\uffc2\024" +
    "\uffc2\025\uffc2\026\uffc2\027\uffc2\035\uffc2\036\uffc2\064\uffc2" +
    "\001\002\000\004\010\uffd1\001\002\000\004\010\uffcf\001" +
    "\002\000\004\064\152\001\002\000\004\063\155\001\002" +
    "\000\006\020\153\063\uffe5\001\002\000\004\064\152\001" +
    "\002\000\004\063\uffe4\001\002\000\004\005\156\001\002" +
    "\000\024\010\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027" +
    "\uffd4\035\uffd4\036\uffd4\064\uffd4\001\002\000\006\034\161" +
    "\064\152\001\002\000\004\063\165\001\002\000\006\020" +
    "\163\063\uffe6\001\002\000\004\063\uffe8\001\002\000\004" +
    "\064\152\001\002\000\004\063\uffe7\001\002\000\004\005" +
    "\166\001\002\000\024\010\uffd6\023\uffd6\024\uffd6\025\uffd6" +
    "\026\uffd6\027\uffd6\035\uffd6\036\uffd6\064\uffd6\001\002\000" +
    "\006\063\ufff5\064\214\001\002\000\016\013\175\014\177" +
    "\034\176\041\200\061\202\064\173\001\002\000\004\005" +
    "\212\001\002\000\016\045\100\046\107\047\104\050\105" +
    "\051\103\052\106\001\002\000\020\045\uffb1\046\uffb1\047" +
    "\uffb1\050\uffb1\051\uffb1\052\uffb1\062\167\001\002\000\024" +
    "\010\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\035" +
    "\uffc6\036\uffc6\064\uffc6\001\002\000\020\005\uffe3\045\uffde" +
    "\046\uffde\047\uffde\050\uffde\051\uffde\052\uffde\001\002\000" +
    "\010\005\uffe1\017\uffe1\020\uffe1\001\002\000\020\005\uffe2" +
    "\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\001" +
    "\002\000\010\005\uffdf\017\uffdf\020\uffdf\001\002\000\004" +
    "\005\203\001\002\000\010\005\uffe0\017\uffe0\020\uffe0\001" +
    "\002\000\024\010\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5" +
    "\027\uffc5\035\uffc5\036\uffc5\064\uffc5\001\002\000\010\013" +
    "\025\014\026\064\075\001\002\000\020\005\uffb9\045\100" +
    "\046\107\047\104\050\105\051\103\052\106\001\002\000" +
    "\004\005\uffbb\001\002\000\010\013\025\014\026\064\075" +
    "\001\002\000\020\005\uffb9\045\100\046\107\047\104\050" +
    "\105\051\103\052\106\001\002\000\004\005\uffba\001\002" +
    "\000\024\010\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027" +
    "\uffc7\035\uffc7\036\uffc7\064\uffc7\001\002\000\004\063\217" +
    "\001\002\000\006\020\215\063\ufff7\001\002\000\006\063" +
    "\ufff5\064\214\001\002\000\004\063\ufff6\001\002\000\004" +
    "\005\220\001\002\000\024\010\ufff4\023\ufff4\024\ufff4\025" +
    "\ufff4\026\ufff4\027\ufff4\035\ufff4\036\ufff4\064\ufff4\001\002" +
    "\000\004\011\222\001\002\000\004\002\ufffe\001\002\000" +
    "\004\064\152\001\002\000\004\063\225\001\002\000\004" +
    "\005\226\001\002\000\024\010\uffd3\023\uffd3\024\uffd3\025" +
    "\uffd3\026\uffd3\027\uffd3\035\uffd3\036\uffd3\064\uffd3\001\002" +
    "\000\006\034\161\064\152\001\002\000\004\063\231\001" +
    "\002\000\004\005\232\001\002\000\024\010\uffd5\023\uffd5" +
    "\024\uffd5\025\uffd5\026\uffd5\027\uffd5\035\uffd5\036\uffd5\064" +
    "\uffd5\001\002\000\004\030\234\001\002\000\004\013\235" +
    "\001\002\000\004\031\236\001\002\000\004\013\237\001" +
    "\002\000\004\032\240\001\002\000\004\007\241\001\002" +
    "\000\022\023\055\024\043\025\056\026\045\027\042\035" +
    "\063\036\066\064\054\001\002\000\004\010\243\001\002" +
    "\000\004\005\244\001\002\000\024\010\uffbd\023\uffbd\024" +
    "\uffbd\025\uffbd\026\uffbd\027\uffbd\035\uffbd\036\uffbd\064\uffbd" +
    "\001\002\000\004\007\ufff0\001\002\000\010\017\uffec\020" +
    "\261\033\262\001\002\000\004\017\250\001\002\000\014" +
    "\042\253\055\251\056\256\057\254\060\252\001\002\000" +
    "\006\005\uffdc\063\uffdc\001\002\000\006\005\uffd9\063\uffd9" +
    "\001\002\000\006\005\uffd8\063\uffd8\001\002\000\006\005" +
    "\uffda\063\uffda\001\002\000\004\005\257\001\002\000\006" +
    "\005\uffdb\063\uffdb\001\002\000\006\007\uffee\064\246\001" +
    "\002\000\004\007\uffed\001\002\000\004\064\246\001\002" +
    "\000\014\013\263\014\265\034\176\041\200\061\202\001" +
    "\002\000\006\017\uffe3\020\uffe3\001\002\000\006\017\uffea" +
    "\020\266\001\002\000\006\017\uffe2\020\uffe2\001\002\000" +
    "\004\064\246\001\002\000\004\017\uffe9\001\002\000\004" +
    "\017\uffeb\001\002\000\004\062\272\001\002\000\006\063" +
    "\ufff1\064\274\001\002\000\004\063\301\001\002\000\004" +
    "\017\275\001\002\000\014\042\253\055\251\056\256\057" +
    "\254\060\252\001\002\000\006\005\277\063\ufff3\001\002" +
    "\000\006\063\ufff1\064\274\001\002\000\004\063\ufff2\001" +
    "\002\000\004\017\302\001\002\000\014\042\253\055\251" +
    "\056\256\057\254\060\252\001\002\000\004\005\304\001" +
    "\002\000\006\007\uffef\016\037\001\002\000\004\007\306" +
    "\001\002\000\022\023\055\024\043\025\056\026\045\027" +
    "\042\035\063\036\066\064\054\001\002\000\004\010\310" +
    "\001\002\000\004\005\311\001\002\000\012\007\ufff8\016" +
    "\ufff8\021\ufff8\022\ufff8\001\002\000\004\062\313\001\002" +
    "\000\006\063\ufff1\064\274\001\002\000\004\063\315\001" +
    "\002\000\004\005\316\001\002\000\006\007\uffef\016\037" +
    "\001\002\000\004\007\320\001\002\000\022\023\055\024" +
    "\043\025\056\026\045\027\042\035\063\036\066\064\054" +
    "\001\002\000\004\010\322\001\002\000\004\005\323\001" +
    "\002\000\012\007\uffd7\016\uffd7\021\uffd7\022\uffd7\001\002" +
    "\000\006\007\ufffa\016\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\322\000\010\002\006\031\005\050\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\050\013\001\001\000\004\003\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\020\001\001\000\010\006\033\007\034\021\030" +
    "\001\001\000\002\001\001\000\004\004\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\027\001\001\000\002\001\001\000\010\006\323\007" +
    "\034\021\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\037\001\001\000\010\006\035\007\034\021" +
    "\030\001\001\000\002\001\001\000\006\014\244\015\246" +
    "\001\001\000\002\001\001\000\034\010\050\022\052\023" +
    "\057\024\047\025\063\026\061\033\043\034\045\035\064" +
    "\036\060\037\056\040\051\041\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\010" +
    "\050\022\146\023\057\024\047\025\063\026\061\033\043" +
    "\034\045\035\064\036\060\037\056\040\051\041\046\001" +
    "\001\000\034\010\050\022\145\023\057\024\047\025\063" +
    "\026\061\033\043\034\045\035\064\036\060\037\056\040" +
    "\051\041\046\001\001\000\002\001\001\000\004\030\131" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\067\044\073\045\070" +
    "\047\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\067\044\115\047\072\001\001\000\004\046\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\067\044\073\045\076\047\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\067\047\112\001\001\000" +
    "\006\004\067\047\107\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\110\001\001\000\006\004\067\047\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\067\047\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\067\044\073\045\117\047\072\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\067\044\073" +
    "\045\122\047\072\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\010\050\022\126\023\057" +
    "\024\047\025\063\026\061\033\043\034\045\035\064\036" +
    "\060\037\056\040\051\041\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\137\001" +
    "\001\000\002\001\001\000\034\010\050\022\134\023\057" +
    "\024\047\025\063\026\061\033\043\034\045\035\064\036" +
    "\060\037\056\040\051\041\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\010\050\022\142\023\057\024\047" +
    "\025\063\026\061\033\043\034\045\035\064\036\060\037" +
    "\056\040\051\041\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\150\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\161\017\157" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\212\001\001\000" +
    "\014\004\067\010\173\032\170\042\200\047\171\001\001" +
    "\000\002\001\001\000\004\046\203\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\067\047\204" +
    "\001\001\000\006\043\205\046\206\001\001\000\002\001" +
    "\001\000\006\004\067\047\207\001\001\000\006\043\210" +
    "\046\206\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\215\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\223\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\161\017\227\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\010\050\022\241\023\057\024" +
    "\047\025\063\026\061\033\043\034\045\035\064\036\060" +
    "\037\056\040\051\041\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\254\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\257\015\246\001\001\000\002\001\001\000\004\015\267" +
    "\001\001\000\004\032\263\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\266\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\272\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\275\001\001\000\002\001\001\000\004\012" +
    "\277\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\302\001\001\000\002\001\001\000\004\013\304\001" +
    "\001\000\002\001\001\000\034\010\050\022\306\023\057" +
    "\024\047\025\063\026\061\033\043\034\045\035\064\036" +
    "\060\037\056\040\051\041\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\313\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\316\001\001\000\002\001\001\000\034\010" +
    "\050\022\320\023\057\024\047\025\063\026\061\033\043" +
    "\034\045\035\064\036\060\037\056\040\051\041\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // TESTE ::= COMENTARIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TESTE",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // COMENTARIO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMENTARIO",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // COMENTARIO ::= comentario 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMENTARIO",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESSAO_LOGICA ::= negacao EXPRESSAO_RELACIONAL operador_logico EXPRESSAO_LOGICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO_LOGICA",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESSAO_LOGICA ::= negacao EXPRESSAO_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO_LOGICA",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESSAO_LOGICA ::= EXPRESSAO_RELACIONAL operador_logico EXPRESSAO_LOGICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO_LOGICA",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESSAO_LOGICA ::= EXPRESSAO_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO_LOGICA",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESSAO_RELACIONAL ::= NUMERO_ID operadores_relacionais NUMERO_ID OPERADORES NUMERO_ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO_RELACIONAL",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESSAO_RELACIONAL ::= NUMERO_ID OPERADORES NUMERO_ID operadores_relacionais NUMERO_ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO_RELACIONAL",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESSAO_RELACIONAL ::= NUMERO_ID operadores_relacionais NUMERO_ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO_RELACIONAL",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NUMERO_ID ::= id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUMERO_ID",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NUMERO_ID ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUMERO_ID",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPERADORES ::= potencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPERADORES ::= resto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPERADORES ::= multiplicacao 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPERADORES ::= divisao 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPERADORES ::= subtracao 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPERADORES ::= soma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONT_EXPRESSAO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONT_EXPRESSAO",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CONT_EXPRESSAO ::= OPERADORES NUMERO_ID CONT_EXPRESSAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONT_EXPRESSAO",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESSAO ::= NUMERO_ID OPERADORES NUMERO_ID CONT_EXPRESSAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ENQUANTO ::= enquanto abre_parenteses EXPRESSAO_LOGICA fecha_parenteses faca ini COMANDO fim pontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENQUANTO",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PARA ::= para id de inteiro ate inteiro faca ini COMANDO fim pontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARA",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // REPETICAO ::= ENQUANTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REPETICAO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // REPETICAO ::= PARA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REPETICAO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ENTAO ::= entao ini COMANDO fim pontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENTAO",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SENAO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENAO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SENAO ::= senao ini COMANDO fim pontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENAO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SE ::= se abre_parenteses EXPRESSAO_LOGICA fecha_parenteses 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SE",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CONDICIONAL ::= SE ENTAO SENAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ATRIBUICAO ::= id atribuicao EXPRESSAO pontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ATRIBUICAO ::= id atribuicao CHAMAFUNC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ATRIBUICAO ::= id atribuicao VALOR pontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // LISTA_COMANDOS ::= CONDICIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_COMANDOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LISTA_COMANDOS ::= CHAMAFUNC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_COMANDOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LISTA_COMANDOS ::= ATRIBUICAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_COMANDOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LISTA_COMANDOS ::= LEIALN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_COMANDOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LISTA_COMANDOS ::= LEIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_COMANDOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LISTA_COMANDOS ::= ESCREVALN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_COMANDOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LISTA_COMANDOS ::= ESCREVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_COMANDOS",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // COMANDO ::= REPETICAO COMANDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMANDO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // COMANDO ::= REPETICAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMANDO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // COMANDO ::= LISTA_COMANDOS COMANDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMANDO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // COMANDO ::= LISTA_COMANDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMANDO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LEIALN ::= leialn abre_parenteses LISTAIDS_LEIA fecha_parenteses pontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LEIALN",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LEIA ::= leia abre_parenteses LISTAIDS_LEIA fecha_parenteses pontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LEIA",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ESCREVALN ::= escrevaln abre_parenteses LISTAIDS_ESC fecha_parenteses pontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCREVALN",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ESCREVA ::= escreva abre_parenteses LISTAIDS_ESC fecha_parenteses pontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCREVA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // GERAPROC ::= procedimento id abre_parenteses PARAMETRO fecha_parenteses pontoVirgula DECLARACAO ini COMANDO fim pontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GERAPROC",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPO_DADO ::= Booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DADO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPO_DADO ::= Caractere 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DADO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPO_DADO ::= Palavra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DADO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPO_DADO ::= Real 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DADO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPO_DADO ::= Inteiro 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DADO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NUMERO ::= real 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUMERO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NUMERO ::= inteiro 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUMERO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VALOR ::= booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VALOR ::= caractere 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VALOR ::= palavra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // VALOR ::= real 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VALOR ::= inteiro 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LISTAIDS_LEIA ::= id virgula LISTAIDS_LEIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAIDS_LEIA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LISTAIDS_LEIA ::= id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAIDS_LEIA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LISTAIDS_ESC ::= palavra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAIDS_ESC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTAIDS_ESC ::= palavra virgula LISTAIDS_LEIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAIDS_ESC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTAIDS_ESC ::= LISTAIDS_LEIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAIDS_ESC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LISTAIDS ::= id atribuicao VALOR virgula LISTAIDS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAIDS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LISTAIDS ::= id atribuicao VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAIDS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LISTAIDS ::= id virgula LISTAIDS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAIDS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTAIDS ::= id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAIDS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CONTINUA_DECL ::= LISTAIDS dois_pontos TIPO_DADO pontoVirgula CONTINUA_DECL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTINUA_DECL",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CONTINUA_DECL ::= LISTAIDS dois_pontos TIPO_DADO pontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTINUA_DECL",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACAO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACAO ::= variavel CONTINUA_DECL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // PARAMETRO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PARAMETRO ::= id dois_pontos TIPO_DADO pontoVirgula PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PARAMETRO ::= id dois_pontos TIPO_DADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CHAMAFUNC ::= id abre_parenteses PARAMFUNC fecha_parenteses pontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CHAMAFUNC",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PARAMFUNC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PARAMFUNC ::= id virgula PARAMFUNC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PARAMFUNC ::= id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GERAFUNC ::= funcao id abre_parenteses PARAMETRO fecha_parenteses dois_pontos TIPO_DADO pontoVirgula DECLARACAO ini COMANDO fim pontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GERAFUNC",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GERASUB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GERASUB",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GERASUB ::= GERAPROC GERASUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GERASUB",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GERASUB ::= GERAFUNC GERASUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GERASUB",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GERACONST ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GERACONST",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // GERACONST ::= constante id NUMERO pontoVirgula GERACONST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GERACONST",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BIBLIOTECA ::= utilize bibIO pontoVirgula GERACONST GERASUB DECLARACAO ini COMANDO fim pontoFinal 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BIBLIOTECA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= TESTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= COMENTARIO programa id pontoVirgula COMENTARIO BIBLIOTECA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}



//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jun 15 20:48:08 BRT 2023
//----------------------------------------------------

package codigo;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jun 15 20:48:08 BRT 2023
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\131\000\002\002\004\000\002\002\006\000\002\002" +
    "\003\000\002\003\014\000\002\005\007\000\002\005\002" +
    "\000\002\006\004\000\002\006\004\000\002\006\002\000" +
    "\002\007\017\000\002\012\005\000\002\012\007\000\002" +
    "\012\002\000\002\013\004\000\002\013\002\000\002\014" +
    "\006\000\002\014\007\000\002\015\003\000\002\015\005" +
    "\000\002\015\005\000\002\015\007\000\002\017\003\000" +
    "\002\017\005\000\002\017\003\000\002\016\003\000\002" +
    "\016\005\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\004\003" +
    "\000\002\004\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\021\015\000\002\032\007\000\002\033\007\000\002\034" +
    "\007\000\002\035\007\000\002\040\005\000\002\025\006" +
    "\000\002\026\007\000\002\026\002\000\002\027\007\000" +
    "\002\011\003\000\002\011\005\000\002\011\002\000\002" +
    "\010\007\000\002\037\006\000\002\037\005\000\002\037" +
    "\006\000\002\022\003\000\002\022\004\000\002\022\003" +
    "\000\002\022\004\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\036\003\000\002\036" +
    "\003\000\002\023\015\000\002\024\013\000\002\041\006" +
    "\000\002\046\005\000\002\046\002\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\043\003\000\002" +
    "\043\003\000\002\043\003\000\002\044\003\000\002\044" +
    "\003\000\002\042\005\000\002\042\007\000\002\042\007" +
    "\000\002\047\003\000\002\047\005\000\002\047\004\000" +
    "\002\047\006\000\002\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\006\012\006\024\005\001\002\000\004\002" +
    "\uffa9\001\002\000\004\061\317\001\002\000\004\063\012" +
    "\001\002\000\004\002\uffff\001\002\000\004\002\011\001" +
    "\002\000\004\002\001\001\002\000\004\005\013\001\002" +
    "\000\004\006\014\001\002\000\004\004\016\001\002\000" +
    "\004\002\000\001\002\000\004\005\017\001\002\000\014" +
    "\007\ufffc\015\021\016\ufffc\021\ufffc\022\ufffc\001\002\000" +
    "\012\007\ufff9\016\ufff9\021\031\022\032\001\002\000\004" +
    "\063\022\001\002\000\006\013\024\014\025\001\002\000" +
    "\004\005\026\001\002\000\026\005\uffe1\043\uffe1\044\uffe1" +
    "\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1\053\uffe1\062" +
    "\uffe1\001\002\000\026\005\uffe2\043\uffe2\044\uffe2\045\uffe2" +
    "\046\uffe2\047\uffe2\050\uffe2\051\uffe2\053\uffe2\062\uffe2\001" +
    "\002\000\014\007\ufffc\015\021\016\ufffc\021\ufffc\022\ufffc" +
    "\001\002\000\012\007\ufffd\016\ufffd\021\ufffd\022\ufffd\001" +
    "\002\000\012\007\ufff9\016\ufff9\021\031\022\032\001\002" +
    "\000\004\063\302\001\002\000\004\063\263\001\002\000" +
    "\006\007\ufff3\016\036\001\002\000\012\007\ufff9\016\ufff9" +
    "\021\031\022\032\001\002\000\006\007\ufffb\016\ufffb\001" +
    "\002\000\004\063\241\001\002\000\004\007\040\001\002" +
    "\000\022\023\053\024\005\025\054\026\043\027\041\035" +
    "\061\036\064\063\052\001\002\000\004\063\225\001\002" +
    "\000\024\010\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027" +
    "\uffc6\035\uffc6\036\uffc6\063\uffc6\001\002\000\004\061\221" +
    "\001\002\000\024\010\uffc3\023\uffc3\024\uffc3\025\uffc3\026" +
    "\uffc3\027\uffc3\035\uffc3\036\uffc3\063\uffc3\001\002\000\024" +
    "\010\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\035" +
    "\uffc0\036\uffc0\063\uffc0\001\002\000\024\010\uffbf\023\uffbf" +
    "\024\uffbf\025\uffbf\026\uffbf\027\uffbf\035\uffbf\036\uffbf\063" +
    "\uffbf\001\002\000\024\010\uffc1\023\uffc1\024\uffc1\025\uffc1" +
    "\026\uffc1\027\uffc1\035\uffc1\036\uffc1\063\uffc1\001\002\000" +
    "\024\010\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2" +
    "\035\uffc2\036\uffc2\063\uffc2\001\002\000\004\010\217\001" +
    "\002\000\006\033\166\061\165\001\002\000\004\061\155" +
    "\001\002\000\004\061\146\001\002\000\024\010\uffc8\023" +
    "\053\024\005\025\054\026\043\027\041\035\061\036\064" +
    "\063\052\001\002\000\024\010\uffca\023\053\024\005\025" +
    "\054\026\043\027\041\035\061\036\064\063\052\001\002" +
    "\000\024\010\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027" +
    "\uffc4\035\uffc4\036\uffc4\063\uffc4\001\002\000\004\040\130" +
    "\001\002\000\004\061\120\001\002\000\024\010\uffbe\023" +
    "\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\035\uffbe\036\uffbe" +
    "\063\uffbe\001\002\000\024\010\uffc5\023\uffc5\024\uffc5\025" +
    "\uffc5\026\uffc5\027\uffc5\035\uffc5\036\uffc5\063\uffc5\001\002" +
    "\000\004\061\065\001\002\000\012\013\024\014\025\052" +
    "\070\063\073\001\002\000\026\005\uffb2\043\uffb2\044\uffb2" +
    "\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\053\uffb2\062" +
    "\uffb2\001\002\000\004\062\117\001\002\000\010\013\024" +
    "\014\025\063\073\001\002\000\020\043\076\044\105\045" +
    "\102\046\103\047\101\050\104\053\100\001\002\000\006" +
    "\051\074\062\uffad\001\002\000\026\005\uffb1\043\uffb1\044" +
    "\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\053\uffb1" +
    "\062\uffb1\001\002\000\012\013\024\014\025\052\070\063" +
    "\073\001\002\000\004\062\uffac\001\002\000\010\013\uffb8" +
    "\014\uffb8\063\uffb8\001\002\000\010\013\024\014\025\063" +
    "\073\001\002\000\010\013\024\014\025\063\073\001\002" +
    "\000\010\013\uffb6\014\uffb6\063\uffb6\001\002\000\010\013" +
    "\uffb3\014\uffb3\063\uffb3\001\002\000\010\013\uffb5\014\uffb5" +
    "\063\uffb5\001\002\000\010\013\uffb4\014\uffb4\063\uffb4\001" +
    "\002\000\010\013\uffb7\014\uffb7\063\uffb7\001\002\000\022" +
    "\043\076\044\105\045\102\046\103\047\101\050\104\051" +
    "\uffb0\062\uffb0\001\002\000\010\013\024\014\025\063\073" +
    "\001\002\000\006\051\uffae\062\uffae\001\002\000\004\053" +
    "\112\001\002\000\010\013\024\014\025\063\073\001\002" +
    "\000\006\051\uffaf\062\uffaf\001\002\000\006\051\115\062" +
    "\uffab\001\002\000\012\013\024\014\025\052\070\063\073" +
    "\001\002\000\004\062\uffaa\001\002\000\004\040\uffd5\001" +
    "\002\000\012\013\024\014\025\052\070\063\073\001\002" +
    "\000\004\062\122\001\002\000\004\032\123\001\002\000" +
    "\004\007\124\001\002\000\022\023\053\024\005\025\054" +
    "\026\043\027\041\035\061\036\064\063\052\001\002\000" +
    "\004\010\126\001\002\000\004\005\127\001\002\000\024" +
    "\010\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\035" +
    "\uffbc\036\uffbc\063\uffbc\001\002\000\004\007\140\001\002" +
    "\000\026\010\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027" +
    "\uffd3\035\uffd3\036\uffd3\037\132\063\uffd3\001\002\000\004" +
    "\007\134\001\002\000\024\010\uffd6\023\uffd6\024\uffd6\025" +
    "\uffd6\026\uffd6\027\uffd6\035\uffd6\036\uffd6\063\uffd6\001\002" +
    "\000\022\023\053\024\005\025\054\026\043\027\041\035" +
    "\061\036\064\063\052\001\002\000\004\010\136\001\002" +
    "\000\004\005\137\001\002\000\024\010\uffd4\023\uffd4\024" +
    "\uffd4\025\uffd4\026\uffd4\027\uffd4\035\uffd4\036\uffd4\063\uffd4" +
    "\001\002\000\022\023\053\024\005\025\054\026\043\027" +
    "\041\035\061\036\064\063\052\001\002\000\004\010\142" +
    "\001\002\000\004\005\143\001\002\000\026\010\uffd2\023" +
    "\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\035\uffd2\036\uffd2" +
    "\037\uffd2\063\uffd2\001\002\000\004\010\uffc9\001\002\000" +
    "\004\010\uffc7\001\002\000\004\063\150\001\002\000\004" +
    "\062\153\001\002\000\006\020\151\062\uffe9\001\002\000" +
    "\004\063\150\001\002\000\004\062\uffe8\001\002\000\004" +
    "\005\154\001\002\000\024\010\uffd8\023\uffd8\024\uffd8\025" +
    "\uffd8\026\uffd8\027\uffd8\035\uffd8\036\uffd8\063\uffd8\001\002" +
    "\000\006\034\157\063\150\001\002\000\004\062\163\001" +
    "\002\000\006\020\161\062\uffea\001\002\000\004\062\uffec" +
    "\001\002\000\004\063\150\001\002\000\004\062\uffeb\001" +
    "\002\000\004\005\164\001\002\000\024\010\uffda\023\uffda" +
    "\024\uffda\025\uffda\026\uffda\027\uffda\035\uffda\036\uffda\063" +
    "\uffda\001\002\000\006\062\uffcf\063\212\001\002\000\016" +
    "\013\173\014\175\034\174\041\176\060\200\063\171\001" +
    "\002\000\004\005\210\001\002\000\016\043\076\044\105" +
    "\045\102\046\103\047\101\050\104\001\002\000\020\043" +
    "\uffb1\044\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\061\165" +
    "\001\002\000\024\010\uffcc\023\uffcc\024\uffcc\025\uffcc\026" +
    "\uffcc\027\uffcc\035\uffcc\036\uffcc\063\uffcc\001\002\000\020" +
    "\005\uffe6\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050" +
    "\uffe1\001\002\000\010\005\uffe5\017\uffe5\020\uffe5\001\002" +
    "\000\020\005\uffe7\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047" +
    "\uffe2\050\uffe2\001\002\000\010\005\uffe3\017\uffe3\020\uffe3" +
    "\001\002\000\004\005\201\001\002\000\010\005\uffe4\017" +
    "\uffe4\020\uffe4\001\002\000\024\010\uffcb\023\uffcb\024\uffcb" +
    "\025\uffcb\026\uffcb\027\uffcb\035\uffcb\036\uffcb\063\uffcb\001" +
    "\002\000\010\013\024\014\025\063\073\001\002\000\020" +
    "\005\uffb9\043\076\044\105\045\102\046\103\047\101\050" +
    "\104\001\002\000\004\005\uffbb\001\002\000\010\013\024" +
    "\014\025\063\073\001\002\000\020\005\uffb9\043\076\044" +
    "\105\045\102\046\103\047\101\050\104\001\002\000\004" +
    "\005\uffba\001\002\000\024\010\uffcd\023\uffcd\024\uffcd\025" +
    "\uffcd\026\uffcd\027\uffcd\035\uffcd\036\uffcd\063\uffcd\001\002" +
    "\000\004\062\215\001\002\000\006\020\213\062\uffd1\001" +
    "\002\000\006\062\uffcf\063\212\001\002\000\004\062\uffd0" +
    "\001\002\000\004\005\216\001\002\000\024\010\uffce\023" +
    "\uffce\024\uffce\025\uffce\026\uffce\027\uffce\035\uffce\036\uffce" +
    "\063\uffce\001\002\000\004\011\220\001\002\000\004\002" +
    "\ufffe\001\002\000\004\063\150\001\002\000\004\062\223" +
    "\001\002\000\004\005\224\001\002\000\024\010\uffd7\023" +
    "\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\035\uffd7\036\uffd7" +
    "\063\uffd7\001\002\000\004\030\226\001\002\000\004\013" +
    "\227\001\002\000\004\031\230\001\002\000\004\013\231" +
    "\001\002\000\004\032\232\001\002\000\004\007\233\001" +
    "\002\000\022\023\053\024\005\025\054\026\043\027\041" +
    "\035\061\036\064\063\052\001\002\000\004\010\235\001" +
    "\002\000\004\005\236\001\002\000\024\010\uffbd\023\uffbd" +
    "\024\uffbd\025\uffbd\026\uffbd\027\uffbd\035\uffbd\036\uffbd\063" +
    "\uffbd\001\002\000\004\007\ufff4\001\002\000\004\017\252" +
    "\001\002\000\010\017\ufff0\020\242\033\243\001\002\000" +
    "\004\063\241\001\002\000\014\013\244\014\246\034\174" +
    "\041\176\060\200\001\002\000\006\017\uffe6\020\uffe6\001" +
    "\002\000\006\017\uffee\020\247\001\002\000\006\017\uffe7" +
    "\020\uffe7\001\002\000\004\063\241\001\002\000\004\017" +
    "\uffed\001\002\000\004\017\uffef\001\002\000\014\042\255" +
    "\054\253\055\260\056\256\057\254\001\002\000\006\005" +
    "\uffe0\062\uffe0\001\002\000\006\005\uffdd\062\uffdd\001\002" +
    "\000\006\005\uffdc\062\uffdc\001\002\000\006\005\uffde\062" +
    "\uffde\001\002\000\004\005\261\001\002\000\006\005\uffdf" +
    "\062\uffdf\001\002\000\006\007\ufff2\063\241\001\002\000" +
    "\004\007\ufff1\001\002\000\004\061\264\001\002\000\006" +
    "\062\ufff5\063\266\001\002\000\004\062\273\001\002\000" +
    "\004\017\267\001\002\000\014\042\255\054\253\055\260" +
    "\056\256\057\254\001\002\000\006\005\271\062\ufff7\001" +
    "\002\000\006\062\ufff5\063\266\001\002\000\004\062\ufff6" +
    "\001\002\000\004\005\274\001\002\000\006\007\ufff3\016" +
    "\036\001\002\000\004\007\276\001\002\000\022\023\053" +
    "\024\005\025\054\026\043\027\041\035\061\036\064\063" +
    "\052\001\002\000\004\010\300\001\002\000\004\005\301" +
    "\001\002\000\012\007\uffdb\016\uffdb\021\uffdb\022\uffdb\001" +
    "\002\000\004\061\303\001\002\000\006\062\ufff5\063\266" +
    "\001\002\000\004\062\305\001\002\000\004\017\306\001" +
    "\002\000\014\042\255\054\253\055\260\056\256\057\254" +
    "\001\002\000\004\005\310\001\002\000\006\007\ufff3\016" +
    "\036\001\002\000\004\007\312\001\002\000\022\023\053" +
    "\024\005\025\054\026\043\027\041\035\061\036\064\063" +
    "\052\001\002\000\004\010\314\001\002\000\004\005\315" +
    "\001\002\000\012\007\ufff8\016\ufff8\021\ufff8\022\ufff8\001" +
    "\002\000\006\007\ufffa\016\ufffa\001\002\000\006\034\157" +
    "\063\150\001\002\000\004\062\321\001\002\000\004\005" +
    "\322\001\002\000\026\002\uffd9\010\uffd9\023\uffd9\024\uffd9" +
    "\025\uffd9\026\uffd9\027\uffd9\035\uffd9\036\uffd9\063\uffd9\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\010\002\007\030\006\033\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\017\001\001\000" +
    "\010\006\032\007\033\021\027\001\001\000\002\001\001" +
    "\000\004\004\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\026\001\001\000\002" +
    "\001\001\000\010\006\315\007\033\021\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\036\001\001" +
    "\000\010\006\034\007\033\021\027\001\001\000\002\001" +
    "\001\000\006\014\236\015\237\001\001\000\002\001\001" +
    "\000\034\010\046\022\050\023\045\024\061\025\057\032" +
    "\041\033\043\034\062\035\056\036\054\037\047\040\044" +
    "\045\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\010\046\022\144\023\045\024\061\025\057\032" +
    "\041\033\043\034\062\035\056\036\054\037\047\040\044" +
    "\045\055\001\001\000\034\010\046\022\143\023\045\024" +
    "\061\025\057\032\041\033\043\034\062\035\056\036\054" +
    "\037\047\040\044\045\055\001\001\000\002\001\001\000" +
    "\004\027\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\065\042" +
    "\071\044\070\047\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\065\042\113\044\070\001\001\000" +
    "\004\043\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\065\042\071\044\070\047\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\065\044\110" +
    "\001\001\000\006\004\065\044\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\043\106\001\001\000\006\004" +
    "\065\044\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\065\044\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\004\065\042\071\044\070\047\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\065\042\071\044\070\047\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\010\046\022" +
    "\124\023\045\024\061\025\057\032\041\033\043\034\062" +
    "\035\056\036\054\037\047\040\044\045\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\010\046\022\134\023\045\024\061" +
    "\025\057\032\041\033\043\034\062\035\056\036\054\037" +
    "\047\040\044\045\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\010\046\022\140\023" +
    "\045\024\061\025\057\032\041\033\043\034\062\035\056" +
    "\036\054\037\047\040\044\045\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\151\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\016" +
    "\157\017\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\161\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\210" +
    "\001\001\000\014\004\065\010\171\031\166\041\176\044" +
    "\167\001\001\000\002\001\001\000\004\043\201\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\065\044\202\001\001\000\006\043\204\046\203\001\001" +
    "\000\002\001\001\000\006\004\065\044\205\001\001\000" +
    "\006\043\204\046\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\213\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\221\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\010\046\022\233\023\045\024\061\025\057\032" +
    "\041\033\043\034\062\035\056\036\054\037\047\040\044" +
    "\045\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\250\001\001\000\004\031\244\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\247\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\256\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\014\261\015\237\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\264\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\267" +
    "\001\001\000\002\001\001\000\004\012\271\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\274\001\001" +
    "\000\002\001\001\000\034\010\046\022\276\023\045\024" +
    "\061\025\057\032\041\033\043\034\062\035\056\036\054" +
    "\037\047\040\044\045\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\303\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\020\306\001\001\000\002\001\001\000\004\013\310" +
    "\001\001\000\002\001\001\000\034\010\046\022\312\023" +
    "\045\024\061\025\057\032\041\033\043\034\062\035\056" +
    "\036\054\037\047\040\044\045\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\157\017\317\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // TESTE ::= ESCREVALN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TESTE",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESSAO_LOGICA ::= negacao EXPRESSAO_RELACIONAL operador_logico EXPRESSAO_LOGICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO_LOGICA",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESSAO_LOGICA ::= negacao EXPRESSAO_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO_LOGICA",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESSAO_LOGICA ::= EXPRESSAO_RELACIONAL operador_logico EXPRESSAO_LOGICA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO_LOGICA",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESSAO_LOGICA ::= EXPRESSAO_RELACIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO_LOGICA",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESSAO_RELACIONAL ::= NUMERO_ID operadores_relacionais NUMERO_ID OPERADORES NUMERO_ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO_RELACIONAL",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESSAO_RELACIONAL ::= NUMERO_ID OPERADORES NUMERO_ID operadores_relacionais NUMERO_ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO_RELACIONAL",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESSAO_RELACIONAL ::= NUMERO_ID operadores_relacionais NUMERO_ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO_RELACIONAL",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NUMERO_ID ::= id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUMERO_ID",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NUMERO_ID ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUMERO_ID",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OPERADORES ::= potencia 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OPERADORES ::= resto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OPERADORES ::= multiplicacao 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OPERADORES ::= divisao 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OPERADORES ::= subtracao 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OPERADORES ::= soma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERADORES",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CONT_EXPRESSAO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONT_EXPRESSAO",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CONT_EXPRESSAO ::= OPERADORES NUMERO_ID CONT_EXPRESSAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONT_EXPRESSAO",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESSAO ::= NUMERO_ID OPERADORES NUMERO_ID CONT_EXPRESSAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRESSAO",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ENQUANTO ::= enquanto abre_parenteses EXPRESSAO_LOGICA fecha_parenteses faca ini COMANDO fim pontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENQUANTO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PARA ::= para id de inteiro ate inteiro faca ini COMANDO fim pontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARA",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // REPETICAO ::= ENQUANTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REPETICAO",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // REPETICAO ::= PARA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("REPETICAO",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LISTA_COMANDOS ::= CONDICIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_COMANDOS",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LISTA_COMANDOS ::= CHAMAFUNC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_COMANDOS",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LISTA_COMANDOS ::= ATRIBUICAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_COMANDOS",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LISTA_COMANDOS ::= ESCREVALN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_COMANDOS",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LISTA_COMANDOS ::= LEIALN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_COMANDOS",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LISTA_COMANDOS ::= LEIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_COMANDOS",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // LISTA_COMANDOS ::= ESCREVA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_COMANDOS",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // COMANDO ::= REPETICAO COMANDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMANDO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // COMANDO ::= REPETICAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMANDO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // COMANDO ::= LISTA_COMANDOS COMANDO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMANDO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // COMANDO ::= LISTA_COMANDOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COMANDO",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ATRIBUICAO ::= id atribuicao EXPRESSAO pontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ATRIBUICAO ::= id atribuicao CHAMAFUNC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ATRIBUICAO ::= id atribuicao VALOR pontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ATRIBUICAO",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CHAMAFUNC ::= id abre_parenteses PARAMFUNC fecha_parenteses pontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CHAMAFUNC",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PARAMFUNC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PARAMFUNC ::= id virgula PARAMFUNC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PARAMFUNC ::= id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMFUNC",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ENTAO ::= entao ini COMANDO fim pontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ENTAO",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENAO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENAO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENAO ::= senao ini COMANDO fim pontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENAO",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SE ::= se abre_parenteses EXPRESSAO_LOGICA fecha_parenteses 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SE",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CONDICIONAL ::= SE ENTAO SENAO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICIONAL",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LEIALN ::= leialn abre_parenteses LISTAIDS_LEIA fecha_parenteses pontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LEIALN",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LEIA ::= leia abre_parenteses LISTAIDS_LEIA fecha_parenteses pontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LEIA",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ESCREVALN ::= escrevaln abre_parenteses LISTAIDS_ESC fecha_parenteses pontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCREVALN",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ESCREVA ::= escreva abre_parenteses LISTAIDS_ESC fecha_parenteses pontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ESCREVA",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // GERAPROC ::= procedimento id abre_parenteses PARAMETRO fecha_parenteses pontoVirgula DECLARACAO ini COMANDO fim pontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GERAPROC",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPO_DADO ::= Booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DADO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPO_DADO ::= Caractere 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DADO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPO_DADO ::= Palavra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DADO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPO_DADO ::= Real 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DADO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPO_DADO ::= Inteiro 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DADO",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NUMERO ::= inteiro 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUMERO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NUMERO ::= real 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUMERO",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VALOR ::= booleano 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VALOR ::= caractere 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VALOR ::= palavra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VALOR ::= inteiro 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VALOR ::= real 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALOR",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTAIDS_LEIA ::= id virgula LISTAIDS_LEIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAIDS_LEIA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LISTAIDS_LEIA ::= id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAIDS_LEIA",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LISTAIDS_ESC ::= palavra 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAIDS_ESC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LISTAIDS_ESC ::= palavra virgula LISTAIDS_LEIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAIDS_ESC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTAIDS_ESC ::= LISTAIDS_LEIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAIDS_ESC",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTAIDS ::= id atribuicao VALOR virgula LISTAIDS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAIDS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTAIDS ::= id atribuicao VALOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAIDS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTAIDS ::= id virgula LISTAIDS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAIDS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LISTAIDS ::= id 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAIDS",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CONTINUA_DECL ::= LISTAIDS dois_pontos TIPO_DADO pontoVirgula CONTINUA_DECL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTINUA_DECL",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CONTINUA_DECL ::= LISTAIDS dois_pontos TIPO_DADO pontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONTINUA_DECL",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACAO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACAO ::= var CONTINUA_DECL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACAO",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // PARAMETRO ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // PARAMETRO ::= id dois_pontos TIPO_DADO pontoVirgula PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // PARAMETRO ::= id dois_pontos TIPO_DADO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GERAFUNC ::= funcao id abre_parenteses PARAMETRO fecha_parenteses dois_pontos TIPO_DADO pontoVirgula DECLARACAO ini COMANDO fim pontoVirgula 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GERAFUNC",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GERASUB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GERASUB",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GERASUB ::= GERAPROC GERASUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GERASUB",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GERASUB ::= GERAFUNC GERASUB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GERASUB",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GERACONST ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GERACONST",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // GERACONST ::= constante id NUMERO pontoVirgula GERACONST 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GERACONST",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BIBLIOTECA ::= utilize bibIO pontoVirgula GERACONST GERASUB DECLARACAO ini COMANDO fim pf 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BIBLIOTECA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= TESTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= programa id pontoVirgula BIBLIOTECA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

